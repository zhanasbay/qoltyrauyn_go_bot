package main

import (
	"context"
	"log"
	"os"
	"strings"
	"time"

	"github.com/joho/godotenv"
	"github.com/mymmrac/telego"
	tu "github.com/mymmrac/telego/telegoutil"
)

// üë• –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Ç
type GameState struct {
	CurrentWord   string
	HostID        int64
	WordGuesserID int64
	WordTime      time.Time
}

// üåç –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞: –∫–ª—é—á ‚Äî chatID, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî GameState
var games = make(map[int64]*GameState)

// üéØ –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
func getGame(chatID int64) *GameState {
	if game, ok := games[chatID]; ok {
		return game
	}
	games[chatID] = &GameState{}
	return games[chatID]
}

func main() {
	_ = godotenv.Load()
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("‚ùå TELEGRAM_BOT_TOKEN is not set")
	}

	bot, err := telego.NewBot(token, telego.WithDefaultLogger(true, true))
	if err != nil {
		log.Fatal("‚ùå Failed to create bot:", err)
	}

	ctx := context.Background()
	words := loadWordsFromFile("words.txt")

	updates, err := bot.UpdatesViaLongPolling(ctx, &telego.GetUpdatesParams{})
	if err != nil {
		log.Fatal("‚ùå Failed to get updates:", err)
	}

	log.Println("‚úÖ Bot is running...")

	for update := range updates {
		if update.Message != nil {
			text := update.Message.Text
			chat := update.Message.Chat
			chatID := chat.ID
			game := getGame(chatID)

			// üîí –ï—Å–ª–∏ –ø–∏—à—É—Ç –≤ –ª–∏—á–∫—É ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç
			if chat.Type == "private" {
				button := tu.InlineKeyboard(
					tu.InlineKeyboardRow(
						tu.InlineKeyboardButton("ü§ù –ë–æ—Ç—Ç—ã —á–∞—Ç“õ–∞ “õ–æ—Å, –±–∞–ª–∞–ø–∞–Ω").
							WithURL("https://t.me/qoltyrauyn_go_bot?startgroup=true"),
					),
				)
				bot.SendMessage(ctx,
					tu.Message(tu.ID(chatID), "–ë“±–ª –æ–π—ã–Ω —Ç–µ–∫ —Ç–æ–ø—Ç–∞ –æ–π–Ω–∞–ª–∞–¥—ã. –ú–µ–Ω—ñ —Ç–æ–ø“õ–∞ “õ–æ—Å—ã“£—ã–∑üëá").
						WithReplyMarkup(button),
				)
				continue
			}

			// üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ "–ë–∞—Å—Ç–∞" ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
			if text == "/start" || text == "–ë–∞—Å—Ç–∞" {
				keyboard := tu.InlineKeyboard(
					tu.InlineKeyboardRow(
						tu.InlineKeyboardButton("–°”©–∑–¥—ñ –∫”©—Ä—É").WithCallbackData("see_word"),
						tu.InlineKeyboardButton("–ö–µ–ª–µ—Å—ñ —Å”©–∑").WithCallbackData("next_word"),
					),
				)
				bot.SendMessage(ctx,
					tu.Message(tu.ID(chatID), "üëã C”ô–ª–µ–º, –±–∞–ª–∞–ø–∞–Ω! –û–±–µ–¥ —ñ—à—Ç—ñ“£ –±–µ? –ö–µ–ª, –æ–π–Ω–∞–π—ã“õ").
						WithReplyMarkup(keyboard),
				)
				continue
			}

			// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
			if game.CurrentWord != "" && strings.EqualFold(text, game.CurrentWord) {
				sender := update.Message.From

				// ‚ùå –í–µ–¥—É—â–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
				if sender.ID == game.HostID {
					continue
				}

				game.CurrentWord = ""
				game.WordGuesserID = sender.ID
				game.WordTime = time.Now()
				game.HostID = sender.ID // –ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî –Ω–æ–≤—ã–π –≤–µ–¥—É—â–∏–π

				msg := "üéâ –ñ–µ“£—ñ–º–ø–∞–∑: @" + sender.Username + "\n–î“±—Ä—ã—Å –∂–∞—É–∞–ø: *" + text + "*"

				keyboard := tu.InlineKeyboard(
					tu.InlineKeyboardRow(
						tu.InlineKeyboardButton("–ú–µ–Ω –∂–∞—Å—ã—Ä–∞–º—ã–Ω").WithCallbackData("hide_word"),
					),
				)

				bot.SendMessage(ctx,
					tu.Message(tu.ID(chatID), msg).
						WithParseMode(telego.ModeMarkdown).
						WithReplyMarkup(keyboard),
				)
			}
		}

		// üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
		if update.CallbackQuery != nil {
			query := update.CallbackQuery
			data := query.Data
			userID := query.From.ID
			ctxUser := tu.ID(userID)

			chatID := query.Message.GetChat().ID
			game := getGame(chatID)

			switch data {

			case "see_word":
				if game.HostID == 0 {
					game.HostID = userID
				}
				if userID != game.HostID {
					bot.SendMessage(ctx, tu.Message(ctxUser, "‚õî –¢–µ–∫ –∂–∞—Å—ã—Ä—É—à—ã “ì–∞–Ω–∞ –±“±–ª –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å–∞ –∞–ª–∞–¥—ã!"))
					break
				}

				game.CurrentWord = getRandomWord(words)
				game.WordGuesserID = 0
				game.WordTime = time.Now()

				_ = bot.AnswerCallbackQuery(ctx, &telego.AnswerCallbackQueryParams{
					CallbackQueryID: query.ID,
					Text:            "üîê –°–µ–Ω—ñ“£ —Å”©–∑—ñ“£: " + game.CurrentWord,
					ShowAlert:       true,
				})

			case "next_word":
				if userID != game.HostID {
					bot.SendMessage(ctx, tu.Message(ctxUser, "‚õî –¢–µ–∫ –∂–∞—Å—ã—Ä—É—à—ã “ì–∞–Ω–∞ –±“±–ª –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å–∞ –∞–ª–∞–¥—ã!"))
					break
				}

				game.CurrentWord = getRandomWord(words)
				game.WordTime = time.Now()

				_ = bot.AnswerCallbackQuery(ctx, &telego.AnswerCallbackQueryParams{
					CallbackQueryID: query.ID,
					Text:            "üîÅ –ö–µ–ª–µ—Å—ñ —Å”©–∑ –¥–∞–π—ã–Ω: " + game.CurrentWord,
					ShowAlert:       true,
				})

			case "hide_word":
				if userID != game.WordGuesserID && time.Since(game.WordTime) < 5*time.Second {
					bot.SendMessage(ctx,
						tu.Message(ctxUser, "‚õî –¢–µ–∫ –∂–µ“£—ñ–º–ø–∞–∑ “ì–∞–Ω–∞ 5 —Å–µ–∫—É–Ω–¥ —ñ—à—ñ–Ω–¥–µ –±–∞—Å–∞ –∞–ª–∞–¥—ã!"))
					break
				}

				keyboard := tu.InlineKeyboard(
					tu.InlineKeyboardRow(
						tu.InlineKeyboardButton("–°”©–∑–¥—ñ –∫”©—Ä—É").WithCallbackData("see_word"),
						tu.InlineKeyboardButton("–ö–µ–ª–µ—Å—ñ —Å”©–∑").WithCallbackData("next_word"),
					),
				)

				hostMention := "@" + query.From.Username
				text := "üéÆ –ö–µ–ª–µ—Å—ñ —Ä–∞—É–Ω–¥ –±–∞—Å—Ç–∞–ª–¥—ã! –ö–µ–ª–µ—Å—ñ —Å”©–∑–¥—ñ " + hostMention + " –∂–∞—Å—ã—Ä–∞–¥—ã"

				bot.SendMessage(ctx,
					tu.Message(tu.ID(chatID), text).
						WithReplyMarkup(keyboard),
				)
			}

			// ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è
			_ = bot.AnswerCallbackQuery(ctx, &telego.AnswerCallbackQueryParams{
				CallbackQueryID: query.ID,
			})
		}
	}
}
