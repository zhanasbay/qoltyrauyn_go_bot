package main

import (
	"context"
	"log"
	"os"
	"strings"
	"time"

	"github.com/joho/godotenv"
	"github.com/mymmrac/telego"
	tu "github.com/mymmrac/telego/telegoutil"
)

// üë• –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
type GameState struct {
	CurrentWord   string
	HostID        int64
	WordGuesserID int64
	WordTime      time.Time
	LastStartTime time.Time // üïí –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ /start
}

// üåç –ö–∞—Ä—Ç–∞: chatID ‚Üí GameState
var games = make(map[int64]*GameState)

func getGame(chatID int64) *GameState {
	if game, ok := games[chatID]; ok {
		return game
	}
	games[chatID] = &GameState{}
	return games[chatID]
}

func main() {
	_ = godotenv.Load()
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("‚ùå TELEGRAM_BOT_TOKEN is not set")
	}

	bot, err := telego.NewBot(token, telego.WithDefaultLogger(true, true))
	if err != nil {
		log.Fatal("‚ùå Failed to create bot:", err)
	}

	ctx := context.Background()
	words := loadWordsFromFile("words.txt")

	updates, err := bot.UpdatesViaLongPolling(ctx, &telego.GetUpdatesParams{})
	if err != nil {
		log.Fatal("‚ùå Failed to get updates:", err)
	}

	log.Println("‚úÖ Bot is running...")

	for update := range updates {
		if update.Message != nil {
			text := update.Message.Text
			chat := update.Message.Chat
			chatID := chat.ID
			game := getGame(chatID)

			// üì• –û—Ç–≤–µ—Ç –≤ –ª–∏—á–∫–µ
			if chat.Type == "private" {
				button := tu.InlineKeyboard(
					tu.InlineKeyboardRow(
						tu.InlineKeyboardButton("ü§ù –ë–æ—Ç—Ç—ã —á–∞—Ç“õ–∞ “õ–æ—Å, –±–∞–ª–∞–ø–∞–Ω").
							WithURL("https://t.me/qoltyrauyn_go_bot?startgroup=true"),
					),
				)
				bot.SendMessage(ctx,
					tu.Message(tu.ID(chatID), "–ë“±–ª –æ–π—ã–Ω —Ç–µ–∫ —Ç–æ–ø—Ç–∞ –æ–π–Ω–∞–ª–∞–¥—ã. –ú–µ–Ω—ñ —Ç–æ–ø“õ–∞ “õ–æ—Å—ã“£—ã–∑üëá").
						WithReplyMarkup(button),
				)
				continue
			}

			// üöÄ /start –Ω–µ–º–µ—Å–µ –ë–∞—Å—Ç–∞
			if text == "/start" || text == "–ë–∞—Å—Ç–∞" {
				if time.Since(game.LastStartTime) < 3*time.Minute {
					bot.SendMessage(ctx,
						tu.Message(tu.ID(chatID), "‚ùó –ë–∞–ª–∞–ø–∞–Ω, –∂–∞—Å—ã—Ä—ã–ª“ì–∞–Ω —Å”©–∑–≥–µ –º–∏–Ω–∏–º—É–º 3 –º–∏–Ω—É—Ç, –∫”©—Ç–µ–Ω—ñ“£–¥—ñ “õ—ã—Å–∞ “ì–æ–π, –±–∞–ª–∞–ø–∞–Ω"),
					)
					continue
				}

				game.LastStartTime = time.Now()
				game.HostID = update.Message.From.ID

				hostUsername := update.Message.From.Username
				msg := "üëã C”ô–ª–µ–º, –±–∞–ª–∞–ø–∞–Ω! –û–±–µ–¥ —ñ—à—Ç—ñ“£ –±–µ? –ö–µ–ª, –æ–π–Ω–∞–π—ã“õ!\n" +
					"–°”©–∑ –∂–∞—Å—ã—Ä–∞—Ç—ã–Ω @" + hostUsername

				keyboard := tu.InlineKeyboard(
					tu.InlineKeyboardRow(
						tu.InlineKeyboardButton("–°”©–∑–¥—ñ –∫”©—Ä—É").WithCallbackData("see_word"),
						tu.InlineKeyboardButton("–ö–µ–ª–µ—Å—ñ —Å”©–∑").WithCallbackData("next_word"),
					),
				)

				bot.SendMessage(ctx,
					tu.Message(tu.ID(chatID), msg).
						WithReplyMarkup(keyboard),
				)
				continue
			}

			// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
			if game.CurrentWord != "" && strings.Contains(strings.ToLower(text), strings.ToLower(game.CurrentWord)) {

				sender := update.Message.From

				if sender.ID == game.HostID {
					continue // ‚ùå –≤–µ–¥—É—â–∏–π –Ω–µ –º–æ–∂–µ—Ç —É–≥–∞–¥—ã–≤–∞—Ç—å
				}

				game.CurrentWord = ""
				game.WordGuesserID = sender.ID
				game.WordTime = time.Now()
				game.HostID = sender.ID

				msg := "üéâ –ñ–µ“£—ñ–º–ø–∞–∑: @" + sender.Username + "\n–î“±—Ä—ã—Å –∂–∞—É–∞–ø: *" + text + "*"

				keyboard := tu.InlineKeyboard(
					tu.InlineKeyboardRow(
						tu.InlineKeyboardButton("–ú–µ–Ω –∂–∞—Å—ã—Ä–∞–º—ã–Ω").WithCallbackData("hide_word"),
					),
				)

				bot.SendMessage(ctx,
					tu.Message(tu.ID(chatID), msg).
						WithParseMode(telego.ModeMarkdown).
						WithReplyMarkup(keyboard),
				)
			}
		}

		if update.CallbackQuery != nil {
			query := update.CallbackQuery
			data := query.Data
			userID := query.From.ID
			ctxUser := tu.ID(userID)
			chatID := query.Message.GetChat().ID
			game := getGame(chatID)

			switch data {
			case "see_word":
				if game.HostID == 0 {
					game.HostID = userID
				}
				if userID != game.HostID {
					_ = bot.AnswerCallbackQuery(ctx, &telego.AnswerCallbackQueryParams{
						CallbackQueryID: query.ID,
						Text:            "‚õî –¢–µ–∫ –∂–∞—Å—ã—Ä—É—à—ã “ì–∞–Ω–∞ –±“±–ª –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å–∞ –∞–ª–∞–¥—ã!",
						ShowAlert:       true,
					})

					break
				}

				game.CurrentWord = getRandomWord(words)
				game.WordGuesserID = 0
				game.WordTime = time.Now()

				_ = bot.AnswerCallbackQuery(ctx, &telego.AnswerCallbackQueryParams{
					CallbackQueryID: query.ID,
					Text:            game.CurrentWord,
					ShowAlert:       true,
				})

			case "next_word":
				if userID != game.HostID {
					_ = bot.AnswerCallbackQuery(ctx, &telego.AnswerCallbackQueryParams{
						CallbackQueryID: query.ID,
						Text:            "‚õî –¢–µ–∫ –∂–∞—Å—ã—Ä—É—à—ã “ì–∞–Ω–∞ –±“±–ª –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å–∞ –∞–ª–∞–¥—ã!",
						ShowAlert:       true,
					})

					break
				}

				game.CurrentWord = getRandomWord(words)
				game.WordTime = time.Now()

				_ = bot.AnswerCallbackQuery(ctx, &telego.AnswerCallbackQueryParams{
					CallbackQueryID: query.ID,
					Text:            game.CurrentWord,
					ShowAlert:       true,
				})

			case "hide_word":
				if userID != game.WordGuesserID && time.Since(game.WordTime) < 5*time.Second {
					bot.SendMessage(ctx,
						tu.Message(ctxUser, "‚õî –¢–µ–∫ –∂–µ“£—ñ–º–ø–∞–∑ “ì–∞–Ω–∞ 5 —Å–µ–∫—É–Ω–¥ —ñ—à—ñ–Ω–¥–µ –±–∞—Å–∞ –∞–ª–∞–¥—ã!"))
					break
				}

				keyboard := tu.InlineKeyboard(
					tu.InlineKeyboardRow(
						tu.InlineKeyboardButton("–°”©–∑–¥—ñ –∫”©—Ä—É").WithCallbackData("see_word"),
						tu.InlineKeyboardButton("–ö–µ–ª–µ—Å—ñ —Å”©–∑").WithCallbackData("next_word"),
					),
				)

				hostMention := "@" + query.From.Username
				text := "üéÆ –ö–µ–ª–µ—Å—ñ —Ä–∞—É–Ω–¥ –±–∞—Å—Ç–∞–ª–¥—ã! –ö–µ–ª–µ—Å—ñ —Å”©–∑–¥—ñ " + hostMention + " –∂–∞—Å—ã—Ä–∞–¥—ã"

				bot.SendMessage(ctx,
					tu.Message(tu.ID(chatID), text).
						WithReplyMarkup(keyboard),
				)
			}

			_ = bot.AnswerCallbackQuery(ctx, &telego.AnswerCallbackQueryParams{
				CallbackQueryID: query.ID,
			})
		}
	}
}
